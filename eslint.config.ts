/* eslint-disable import/no-extraneous-dependencies */
import { dirname } from "path";
import { fileURLToPath } from "url";
import globals from "globals";
import { defineConfig, globalIgnores } from "eslint/config";
import { FlatCompat } from "@eslint/eslintrc";
// A
// import pluginJs from "@eslint/js";
// import reactPlugin from "eslint-plugin-react";
// import reactHooks from "eslint-plugin-react-hooks";
// import nextPlugin from "@next/eslint-plugin-next";
// import importPlugin from "eslint-plugin-import";

const baseFilename = fileURLToPath(import.meta.url);
const baseDirname = dirname(baseFilename);
const idMaxLength = 20;
const idMinLength = 7;
const maxCallbacks = 1;
const maxComplexity = 5;
const maxClasses = 1;
const maxDepth = 2;
const maxFunctionLines = 20;
const maxLines = 300;
const maxParams = 4;
const maxStatements = 5;
const minSortKeys = 2;
const minDescLength = 0;
const indentLength = 2;
const idLengthCommon = {
  exceptionPatterns: [],
  max: idMaxLength,
  min: idMinLength,
};
const idMatchOptions = {
  classFields: true,
  ignoreDestructuring: false,
  onlyDeclarations: false,
  properties: true,
};
const compatConf = new FlatCompat({
  baseDirectory: baseDirname,
});

const eslintConfig = defineConfig([
  // A
  // pluginJs.configs.recommended,
  // reactPlugin.configs.flat.recommended,
  globalIgnores([".next/*", "node_modules/*", "out/*"]),
  ...compatConf.config({
    extends: ["next/core-web-vitals", "next/typescript"],
  }),
  {
    // A
    // plugins: {
    //   importPlugin,
    //   nextPlugin,
    //   reactHooks,
    //   reactPlugin,
    // },
    languageOptions: {
      parserOptions: {
        projectService: true,
        sourceType: "script",
        tsconfigRootDir: import.meta.dirname,
      },
    },
    rules: {
      "@next/next/google-font-display": ["error"],
      "@next/next/google-font-preconnect": ["error"],
      "@next/next/inline-script-id": ["error"],
      "@next/next/next-script-for-ga": ["error"],
      "@next/next/no-assign-module-variable": ["error"],
      "@next/next/no-async-client-component": ["error"],
      "@next/next/no-before-interactive-script-outside-document": ["error"],
      "@next/next/no-css-tags": ["error"],
      "@next/next/no-document-import-in-page": ["error"],
      "@next/next/no-duplicate-head": ["error"],
      "@next/next/no-head-element": ["error"],
      "@next/next/no-head-import-in-document": ["error"],
      "@next/next/no-html-link-for-pages": ["error"],
      "@next/next/no-img-element": ["error"],
      "@next/next/no-page-custom-font": ["error"],
      "@next/next/no-script-component-in-head": ["error"],
      "@next/next/no-styled-jsx-in-document": ["error"],
      "@next/next/no-sync-scripts": ["error"],
      "@next/next/no-title-in-document-head": ["error"],
      "@next/next/no-typos": ["error"],
      "@next/next/no-unwanted-polyfillio": ["error"],
      "@typescript-eslint/adjacent-overload-signatures": "error",
      "@typescript-eslint/array-type": [
        "error",
        {
          default: "array",
          readonly: "array",
        },
      ],
      "@typescript-eslint/await-thenable": "error",
      "@typescript-eslint/ban-ts-comment": [
        "error",
        {
          minimumDescriptionLength: minDescLength,
          "ts-check": true,
          "ts-expect-error": true,
          "ts-ignore": true,
          "ts-nocheck": true,
        },
      ],
      "@typescript-eslint/ban-tslint-comment": "error",
      "@typescript-eslint/class-literal-property-style": ["error", "fields"],
      "@typescript-eslint/class-methods-use-this": [
        "error",
        {
          enforceForClassFields: true,
          exceptMethods: [],
          ignoreClassesThatImplementAnInterface: false,
          ignoreOverrideMethods: false,
        },
      ],
      "@typescript-eslint/consistent-generic-constructors": [
        "error",
        "type-annotation",
      ],
      "@typescript-eslint/consistent-indexed-object-style": [
        "error",
        "index-signature",
      ],
      "@typescript-eslint/consistent-return": "off",
      // Recommended to use tsconfig's noImplicitReturns
      // "@typescript-eslint/consistent-return": [
      //   "error",
      //   { treatUndefinedAsUnspecified: false },
      // ],
      "@typescript-eslint/consistent-type-assertions": [
        "error",
        {
          assertionStyle: "never",
          // Conflict with "never" value
          // arrayLiteralTypeAssertions: "never",
          // objectLiteralTypeAssertions: "never",
        },
      ],
      "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
      "@typescript-eslint/consistent-type-exports": [
        "error",
        { fixMixedExportsWithInlineTypeSpecifier: false },
      ],
      "@typescript-eslint/consistent-type-imports": [
        "error",
        {
          disallowTypeAnnotations: true,
          fixStyle: "separate-type-imports",
          prefer: "type-imports",
        },
      ],
      "@typescript-eslint/default-param-last": "error",
      "@typescript-eslint/dot-notation": [
        "error",
        {
          allowIndexSignaturePropertyAccess: false,
          allowKeywords: false,
          allowPattern: "^$",
          allowPrivateClassPropertyAccess: false,
          allowProtectedClassPropertyAccess: false,
        },
      ],
      "@typescript-eslint/explicit-function-return-type": [
        "error",
        {
          allowConciseArrowFunctionExpressionsStartingWithVoid: false,
          allowDirectConstAssertionInArrowFunctions: false,
          allowExpressions: false,
          allowFunctionsWithoutTypeParameters: false,
          allowHigherOrderFunctions: false,
          allowIIFEs: false,
          allowTypedFunctionExpressions: false,
          allowedNames: [],
        },
      ],
      "@typescript-eslint/explicit-member-accessibility": [
        "error",
        {
          accessibility: "explicit",
          ignoredMethodNames: [],
          overrides: {
            accessors: "explicit",
            constructors: "explicit",
            methods: "explicit",
            parameterProperties: "explicit",
            properties: "explicit",
          },
        },
      ],
      "@typescript-eslint/explicit-module-boundary-types": [
        "error",
        {
          allowArgumentsExplicitlyTypedAsAny: false,
          allowDirectConstAssertionInArrowFunctions: false,
          allowHigherOrderFunctions: false,
          allowOverloadFunctions: false,
          allowTypedFunctionExpressions: false,
          allowedNames: [],
        },
      ],
      "@typescript-eslint/init-declarations": ["error", "always"],
      "@typescript-eslint/max-params": [
        "error",
        {
          countVoidThis: true,
          max: maxParams,
        },
      ],
      "@typescript-eslint/member-ordering": [
        "error",
        {
          default: {
            memberTypes: [
              // Index signature
              "signature",
              "call-signature",

              // Fields
              "public-static-field",
              "protected-static-field",
              "private-static-field",
              "#private-static-field",

              "public-decorated-field",
              "protected-decorated-field",
              "private-decorated-field",

              "public-instance-field",
              "protected-instance-field",
              "private-instance-field",
              "#private-instance-field",

              "public-abstract-field",
              "protected-abstract-field",

              "public-field",
              "protected-field",
              "private-field",
              "#private-field",

              "static-field",
              "instance-field",
              "abstract-field",

              "decorated-field",

              "field",

              // Static initialization
              "static-initialization",

              // Constructors
              "public-constructor",
              "protected-constructor",
              "private-constructor",

              "constructor",

              // Accessors
              "public-static-accessor",
              "protected-static-accessor",
              "private-static-accessor",
              "#private-static-accessor",

              "public-decorated-accessor",
              "protected-decorated-accessor",
              "private-decorated-accessor",

              "public-instance-accessor",
              "protected-instance-accessor",
              "private-instance-accessor",
              "#private-instance-accessor",

              "public-abstract-accessor",
              "protected-abstract-accessor",

              "public-accessor",
              "protected-accessor",
              "private-accessor",
              "#private-accessor",

              "static-accessor",
              "instance-accessor",
              "abstract-accessor",

              "decorated-accessor",

              "accessor",

              // Getters
              "public-static-get",
              "protected-static-get",
              "private-static-get",
              "#private-static-get",

              "public-decorated-get",
              "protected-decorated-get",
              "private-decorated-get",

              "public-instance-get",
              "protected-instance-get",
              "private-instance-get",
              "#private-instance-get",

              "public-abstract-get",
              "protected-abstract-get",

              "public-get",
              "protected-get",
              "private-get",
              "#private-get",

              "static-get",
              "instance-get",
              "abstract-get",

              "decorated-get",

              "get",

              // Setters
              "public-static-set",
              "protected-static-set",
              "private-static-set",
              "#private-static-set",

              "public-decorated-set",
              "protected-decorated-set",
              "private-decorated-set",

              "public-instance-set",
              "protected-instance-set",
              "private-instance-set",
              "#private-instance-set",

              "public-abstract-set",
              "protected-abstract-set",

              "public-set",
              "protected-set",
              "private-set",
              "#private-set",

              "static-set",
              "instance-set",
              "abstract-set",

              "decorated-set",

              "set",

              // Methods
              "public-static-method",
              "protected-static-method",
              "private-static-method",
              "#private-static-method",

              "public-decorated-method",
              "protected-decorated-method",
              "private-decorated-method",

              "public-instance-method",
              "protected-instance-method",
              "private-instance-method",
              "#private-instance-method",

              "public-abstract-method",
              "protected-abstract-method",

              "public-method",
              "protected-method",
              "private-method",
              "#private-method",

              "static-method",
              "instance-method",
              "abstract-method",

              "decorated-method",

              "method",
            ],
            optionalityOrder: "required-first",
            order: "alphabetically-case-insensitive",
          },
        },
      ],
      "@typescript-eslint/method-signature-style": ["error", "property"],
      "@typescript-eslint/naming-convention": [
        "error",
        {
          format: ["strictCamelCase"],
          leadingUnderscore: "forbid",
          selector: "default",
          trailingUnderscore: "forbid",
        },
        {
          format: ["strictCamelCase", "StrictPascalCase"],
          leadingUnderscore: "forbid",
          selector: "import",
          trailingUnderscore: "forbid",
        },
        {
          format: ["strictCamelCase", "StrictPascalCase"],
          leadingUnderscore: "forbid",
          selector: "function",
          trailingUnderscore: "forbid",
        },
        {
          format: ["StrictPascalCase"],
          leadingUnderscore: "forbid",
          selector: "interface",
          trailingUnderscore: "forbid",
        },
      ],
      "@typescript-eslint/no-array-constructor": "error",
      "@typescript-eslint/no-array-delete": "error",
      "@typescript-eslint/no-base-to-string": [
        "error",
        { ignoredTypeNames: [] },
      ],
      "@typescript-eslint/no-confusing-non-null-assertion": ["error"],
      "@typescript-eslint/no-confusing-void-expression": ["error"],
      "@typescript-eslint/no-deprecated": ["error"],
      "@typescript-eslint/no-dupe-class-members": ["error"],
      "@typescript-eslint/no-duplicate-enum-values": ["error"],
      "@typescript-eslint/no-duplicate-type-constituents": ["error"],
      "@typescript-eslint/no-dynamic-delete": ["error"],
      "@typescript-eslint/no-empty-function": ["error"],
      "@typescript-eslint/no-empty-interface": ["error"],
      "@typescript-eslint/no-empty-object-type": ["error"],
      "@typescript-eslint/no-explicit-any": ["error"],
      "@typescript-eslint/no-extra-non-null-assertion": ["error"],
      "@typescript-eslint/no-extraneous-class": ["error"],
      "@typescript-eslint/no-floating-promises": ["error"],
      "@typescript-eslint/no-for-in-array": ["error"],
      "@typescript-eslint/no-implied-eval": ["error"],
      "@typescript-eslint/no-import-type-side-effects": ["error"],
      "@typescript-eslint/no-inferrable-types": ["error"],
      "@typescript-eslint/no-invalid-this": ["error"],
      "@typescript-eslint/no-invalid-void-type": ["error"],
      "@typescript-eslint/no-loop-func": ["error"],
      "@typescript-eslint/no-loss-of-precision": ["error"],
      "@typescript-eslint/no-magic-numbers": ["error"],
      "@typescript-eslint/no-meaningless-void-operator": ["error"],
      "@typescript-eslint/no-misused-new": ["error"],
      "@typescript-eslint/no-misused-promises": ["error"],
      "@typescript-eslint/no-misused-spread": ["error"],
      "@typescript-eslint/no-mixed-enums": ["error"],
      "@typescript-eslint/no-namespace": ["error"],
      "@typescript-eslint/no-non-null-asserted-nullish-coalescing": ["error"],
      "@typescript-eslint/no-non-null-asserted-optional-chain": ["error"],
      "@typescript-eslint/no-non-null-assertion": ["error"],
      "@typescript-eslint/no-redeclare": ["error"],
      "@typescript-eslint/no-redundant-type-constituents": ["error"],
      "@typescript-eslint/no-require-imports": ["error"],
      "@typescript-eslint/no-restricted-imports": ["error"],
      "@typescript-eslint/no-restricted-types": ["error"],
      "@typescript-eslint/no-shadow": ["error"],
      "@typescript-eslint/no-this-alias": ["error"],
      "@typescript-eslint/no-type-alias": ["error"],
      "@typescript-eslint/no-unnecessary-boolean-literal-compare": ["error"],
      "@typescript-eslint/no-unnecessary-condition": ["error"],
      "@typescript-eslint/no-unnecessary-parameter-property-assignment": [
        "error",
      ],
      "@typescript-eslint/no-unnecessary-qualifier": ["error"],
      "@typescript-eslint/no-unnecessary-template-expression": ["error"],
      "@typescript-eslint/no-unnecessary-type-arguments": ["error"],
      "@typescript-eslint/no-unnecessary-type-assertion": ["error"],
      "@typescript-eslint/no-unnecessary-type-constraint": ["error"],
      "@typescript-eslint/no-unnecessary-type-conversion": ["error"],
      "@typescript-eslint/no-unnecessary-type-parameters": ["error"],
      "@typescript-eslint/no-unsafe-argument": ["error"],
      "@typescript-eslint/no-unsafe-assignment": ["error"],
      "@typescript-eslint/no-unsafe-call": ["error"],
      "@typescript-eslint/no-unsafe-declaration-merging": ["error"],
      "@typescript-eslint/no-unsafe-enum-comparison": ["error"],
      "@typescript-eslint/no-unsafe-function-type": ["error"],
      "@typescript-eslint/no-unsafe-member-access": ["error"],
      "@typescript-eslint/no-unsafe-return": ["error"],
      "@typescript-eslint/no-unsafe-type-assertion": ["error"],
      "@typescript-eslint/no-unsafe-unary-minus": ["error"],
      "@typescript-eslint/no-unused-expressions": ["error"],
      "@typescript-eslint/no-unused-vars": ["error"],
      "@typescript-eslint/no-use-before-define": ["error"],
      "@typescript-eslint/no-useless-constructor": ["error"],
      "@typescript-eslint/no-useless-empty-export": ["error"],
      "@typescript-eslint/no-var-requires": ["error"],
      "@typescript-eslint/no-wrapper-object-types": ["error"],
      "@typescript-eslint/non-nullable-type-assertion-style": ["error"],
      "@typescript-eslint/only-throw-error": ["error"],
      "@typescript-eslint/parameter-properties": ["error"],
      "@typescript-eslint/prefer-as-const": ["error"],
      "@typescript-eslint/prefer-destructuring": ["error"],
      "@typescript-eslint/prefer-enum-initializers": ["error"],
      "@typescript-eslint/prefer-find": ["error"],
      "@typescript-eslint/prefer-for-of": ["error"],
      "@typescript-eslint/prefer-function-type": ["error"],
      "@typescript-eslint/prefer-includes": ["error"],
      "@typescript-eslint/prefer-literal-enum-member": ["error"],
      "@typescript-eslint/prefer-namespace-keyword": ["error"],
      "@typescript-eslint/prefer-nullish-coalescing": ["error"],
      "@typescript-eslint/prefer-optional-chain": ["error"],
      "@typescript-eslint/prefer-promise-reject-errors": ["error"],
      "@typescript-eslint/prefer-readonly": ["error"],
      "@typescript-eslint/prefer-readonly-parameter-types": [
        "error",
        { allow: [{ from: "package", name: "ReactNode", package: "react" }] },
      ],
      "@typescript-eslint/prefer-reduce-type-parameter": ["error"],
      "@typescript-eslint/prefer-regexp-exec": ["error"],
      "@typescript-eslint/prefer-return-this-type": ["error"],
      "@typescript-eslint/prefer-string-starts-ends-with": ["error"],
      "@typescript-eslint/prefer-ts-expect-error": ["error"],
      "@typescript-eslint/promise-function-async": ["error"],
      "@typescript-eslint/related-getter-setter-pairs": ["error"],
      "@typescript-eslint/require-array-sort-compare": ["error"],
      "@typescript-eslint/require-await": ["error"],
      "@typescript-eslint/restrict-plus-operands": ["error"],
      "@typescript-eslint/restrict-template-expressions": ["error"],
      "@typescript-eslint/return-await": ["error"],
      "@typescript-eslint/sort-type-constituents": ["error"],
      "@typescript-eslint/strict-boolean-expressions": ["error"],
      "@typescript-eslint/switch-exhaustiveness-check": ["error"],
      "@typescript-eslint/triple-slash-reference": ["error"],
      "@typescript-eslint/typedef": ["error"],
      "@typescript-eslint/unbound-method": ["error"],
      "@typescript-eslint/unified-signatures": ["error"],
      "@typescript-eslint/use-unknown-in-catch-callback-variable": ["error"],
      "accessor-pairs": [
        "error",
        {
          enforceForClassMembers: true,
          getWithoutSet: true,
          setWithoutGet: true,
        },
      ],
      "array-callback-return": [
        "error",
        {
          allowImplicit: false,
          allowVoid: false,
          checkForEach: true,
        },
      ],
      "arrow-body-style": ["error", "never"],
      "block-scoped-var": "error",
      camelcase: [
        "error",
        {
          allow: [],
          ignoreDestructuring: false,
          ignoreGlobals: false,
          ignoreImports: false,
          properties: "always",
        },
      ],
      "capitalized-comments": [
        "error",
        "always",
        {
          block: {
            ignoreConsecutiveComments: false,
            ignoreInlineComments: false,
          },
          line: {
            ignoreConsecutiveComments: true,
            ignoreInlineComments: false,
          },
        },
      ],
      "class-methods-use-this": "off",
      // Conflict with @typescript-eslint/class-methods-use-this
      // "class-methods-use-this": [
      //   "error",
      //   {
      //     enforceForClassFields: true,
      //     exceptMethods: [],
      //     ignoreClassesWithImplements: "public-fields",
      //     ignoreOverrideMethods: true,
      //   },
      // ],
      complexity: ["error", { max: maxComplexity, variant: "classic" }],
      // Conflict with @typescript-eslint/consistent-return
      "consistent-return": ["error", { treatUndefinedAsUnspecified: false }],
      "consistent-this": ["error", "self"],
      "constructor-super": "error",
      curly: ["error", "multi", "consistent"],
      "default-case": ["error", { commentPattern: "^$" }],
      "default-case-last": "error",
      "default-param-last": "off",
      // Conflict with @typescript-eslint/default-param-last
      // "default-param-last": "error",
      "dot-notation": "off",
      // Conflict with @typescript-eslint/dot-notation
      // "dot-notation": ["error", { allowKeywords: false, allowPattern: "^$" }],
      eqeqeq: ["error", "always", { null: "always" }],
      "for-direction": "error",
      "func-name-matching": [
        "error",
        "always",
        {
          considerPropertyDescriptor: true,
          includeCommonJSModuleExports: true,
        },
      ],
      "func-names": ["error", "always", { generators: "always" }],
      "func-style": [
        "error",
        "expression",
        {
          allowArrowFunctions: false,
          overrides: { namedExports: "expression" },
        },
      ],
      "getter-return": ["error", { allowImplicit: false }],
      "grouped-accessor-pairs": ["error", "setBeforeGet"],
      "guard-for-in": "error",
      "id-denylist": ["error", "data", "err", "e", "cb", "callback"],
      "id-length": [
        "error",
        {
          ...idLengthCommon,
          exceptions: ["React", "title"],
          properties: "always",
        },
      ],
      "id-match": ["error", "^[A-Z]?[a-z]+([A-Z][a-z]+)*$", idMatchOptions],
      "import/consistent-type-specifier-style": ["error"],
      "import/default": ["error"],
      "import/dynamic-import-chunkname": ["error"],
      "import/export": ["error"],
      "import/exports-last": ["error"],
      "import/extensions": ["error"],
      "import/first": ["error"],
      "import/group-exports": ["error"],
      "import/imports-first": ["error"],
      "import/max-dependencies": ["error"],
      "import/named": ["error"],
      "import/namespace": ["error"],
      "import/newline-after-import": ["error"],
      "import/no-absolute-path": ["error"],
      "import/no-amd": ["error"],
      "import/no-anonymous-default-export": ["error"],
      "import/no-commonjs": ["error"],
      "import/no-cycle": ["error"],
      "import/no-default-export": ["error"],
      "import/no-deprecated": ["error"],
      "import/no-duplicates": ["error"],
      "import/no-dynamic-require": ["error"],
      "import/no-empty-named-blocks": ["error"],
      "import/no-extraneous-dependencies": ["error"],
      "import/no-import-module-exports": ["error"],
      "import/no-internal-modules": [
        "error",
        { allow: ["next/*", "next/**/*", "eslint/*", "@/**/*"] },
      ],
      "import/no-mutable-exports": ["error"],
      "import/no-named-as-default": ["error"],
      "import/no-named-as-default-member": ["error"],
      "import/no-named-default": ["error"],
      "import/no-named-export": ["error"],
      "import/no-namespace": ["error"],
      "import/no-nodejs-modules": ["error"],
      "import/no-relative-packages": ["error"],
      "import/no-relative-parent-imports": "off",
      // Using cross directory
      // "import/no-relative-parent-imports": ["error"],
      "import/no-restricted-paths": ["error"],
      "import/no-self-import": ["error"],
      "import/no-unassigned-import": [
        "error",
        { allow: ["./src/app/globals.css"] },
      ],
      "import/no-unresolved": ["error"],
      "import/no-unused-modules": ["error"],
      "import/no-useless-path-segments": ["error"],
      "import/no-webpack-loader-syntax": ["error"],
      "import/order": ["error"],
      "import/prefer-default-export": ["error", { target: "single" }],
      "import/unambiguous": ["error"],
      "init-declarations": "off",
      // Conflict with @typescript-eslint/init-declarations
      // "init-declarations": ["error", "always"],
      "jsx-a11y/accessible-emoji": ["error"],
      "jsx-a11y/alt-text": ["error"],
      "jsx-a11y/anchor-ambiguous-text": ["error"],
      "jsx-a11y/anchor-has-content": ["error"],
      "jsx-a11y/anchor-is-valid": ["error"],
      "jsx-a11y/aria-activedescendant-has-tabindex": ["error"],
      "jsx-a11y/aria-props": ["error"],
      "jsx-a11y/aria-proptypes": ["error"],
      "jsx-a11y/aria-role": ["error"],
      "jsx-a11y/aria-unsupported-elements": ["error"],
      "jsx-a11y/autocomplete-valid": ["error"],
      "jsx-a11y/click-events-have-key-events": ["error"],
      "jsx-a11y/control-has-associated-label": ["error"],
      "jsx-a11y/heading-has-content": ["error"],
      "jsx-a11y/html-has-lang": ["error"],
      "jsx-a11y/iframe-has-title": ["error"],
      "jsx-a11y/img-redundant-alt": ["error"],
      "jsx-a11y/interactive-supports-focus": ["error"],
      "jsx-a11y/label-has-associated-control": ["error"],
      "jsx-a11y/label-has-for": ["error"],
      "jsx-a11y/lang": ["error"],
      "jsx-a11y/media-has-caption": ["error"],
      "jsx-a11y/mouse-events-have-key-events": ["error"],
      "jsx-a11y/no-access-key": ["error"],
      "jsx-a11y/no-aria-hidden-on-focusable": ["error"],
      "jsx-a11y/no-autofocus": ["error"],
      "jsx-a11y/no-distracting-elements": ["error"],
      "jsx-a11y/no-interactive-element-to-noninteractive-role": ["error"],
      "jsx-a11y/no-noninteractive-element-interactions": ["error"],
      "jsx-a11y/no-noninteractive-element-to-interactive-role": ["error"],
      "jsx-a11y/no-noninteractive-tabindex": ["error"],
      "jsx-a11y/no-onchange": ["error"],
      "jsx-a11y/no-redundant-roles": ["error"],
      "jsx-a11y/no-static-element-interactions": ["error"],
      "jsx-a11y/prefer-tag-over-role": ["error"],
      "jsx-a11y/role-has-required-aria-props": ["error"],
      "jsx-a11y/role-supports-aria-props": ["error"],
      "jsx-a11y/scope": ["error"],
      "jsx-a11y/tabindex-no-positive": ["error"],
      "logical-assignment-operators": [
        "error",
        "always",
        { enforceForIfStatements: true },
      ],
      "max-classes-per-file": [
        "error",
        { ignoreExpressions: false, max: maxClasses },
      ],
      "max-depth": ["error", maxDepth],
      "max-lines": [
        "error",
        {
          max: maxLines,
          skipBlankLines: true,
          skipComments: true,
        },
      ],
      "max-lines-per-function": [
        "error",
        {
          IIFEs: true,
          max: maxFunctionLines,
          skipBlankLines: false,
          skipComments: false,
        },
      ],
      "max-nested-callbacks": ["error", maxCallbacks],
      "max-params": "off",
      // Conflict with @typescript-eslint/max-params
      // "max-params": ["error", { max: maxParams, countVoidThis: true }],
      "max-statements": ["error", maxStatements],
      "new-cap": [
        "error",
        {
          capIsNew: true,
          capIsNewExceptionPattern: "",
          capIsNewExceptions: [],
          newIsCap: true,
          newIsCapExceptionPattern: "",
          newIsCapExceptions: [],
          properties: true,
        },
      ],
      "no-alert": "error",
      "no-array-constructor": "off",
      // Conflict with @typescript-eslint/no-array-constructor
      // "no-array-constructor": "error",
      "no-async-promise-executor": "error",
      "no-await-in-loop": "error",
      "no-bitwise": ["error", { allow: [], int32Hint: false }],
      "no-caller": "error",
      "no-case-declarations": "error",
      "no-class-assign": "error",
      "no-compare-neg-zero": "error",
      "no-cond-assign": ["error", "always"],
      "no-console": ["error", { allow: ["log"] }],
      "no-const-assign": "error",
      "no-constant-binary-expression": "error",
      "no-constant-condition": ["error", { checkLoops: "all" }],
      "no-constructor-return": "error",
      "no-continue": "error",
      "no-control-regex": "error",
      "no-debugger": "error",
      "no-delete-var": "error",
      "no-div-regex": "error",
      "no-dupe-args": "error",
      "no-dupe-class-members": "error",
      "no-dupe-else-if": "error",
      "no-dupe-keys": "error",
      "no-duplicate-case": "error",
      "no-duplicate-imports": ["error", { includeExports: true }],
      "no-else-return": ["error", { allowElseIf: false }],
      "no-empty": ["error", { allowEmptyCatch: false }],
      "no-empty-character-class": "error",
      "no-empty-function": ["error", { allow: [] }],
      "no-empty-pattern": ["error", { allowObjectPatternsAsParameters: false }],
      "no-empty-static-block": "error",
      "no-eq-null": "error",
      "no-eval": ["error", { allowIndirect: false }],
      "no-ex-assign": "error",
      "no-extend-native": ["error", { exceptions: [] }],
      "no-extra-bind": "error",
      "no-extra-boolean-cast": ["error", { enforceForInnerExpressions: true }],
      "no-extra-label": "error",
      "no-fallthrough": [
        "error",
        {
          allowEmptyCase: true,
          commentPattern: "^$",
          reportUnusedFallthroughComment: true,
        },
      ],
      "no-func-assign": "error",
      "no-global-assign": ["error", { exceptions: [] }],
      "no-implicit-coercion": [
        "error",
        {
          allow: [],
          boolean: true,
          disallowTemplateShorthand: true,
          number: true,
          string: true,
        },
      ],
      "no-implicit-globals": ["error", { lexicalBindings: true }],
      "no-implied-eval": "error",
      "no-import-assign": "error",
      "no-inline-comments": ["error", { ignorePattern: "" }],
      "no-inner-declarations": [
        "error",
        "both",
        { blockScopedFunctions: "disallow" },
      ],
      "no-invalid-regexp": ["error", { allowConstructorFlags: [] }],
      "no-invalid-this": ["error", { capIsConstructor: false }],
      "no-irregular-whitespace": [
        "error",
        {
          skipComments: false,
          skipJSXText: false,
          skipRegExps: false,
          skipStrings: false,
          skipTemplates: false,
        },
      ],
      "no-iterator": "error",
      "no-label-var": "error",
      "no-labels": ["error", { allowLoop: false, allowSwitch: false }],
      "no-lone-blocks": "error",
      "no-lonely-if": "error",
      "no-loop-func": "error",
      "no-loss-of-precision": "error",
      "no-magic-numbers": [
        "error",
        {
          detectObjects: true,
          enforceConst: true,
          ignore: [],
          ignoreArrayIndexes: false,
          ignoreClassFieldInitialValues: false,
          ignoreDefaultValues: false,
        },
      ],
      "no-misleading-character-class": ["error", { allowEscape: true }],
      "no-multi-assign": ["error", { ignoreNonDeclaration: false }],
      "no-multi-str": "error",
      "no-negated-condition": "error",
      "no-nested-ternary": "error",
      "no-new": "error",
      "no-new-func": "error",
      "no-new-native-nonconstructor": "error",
      "no-new-wrappers": "error",
      "no-nonoctal-decimal-escape": "error",
      "no-obj-calls": "error",
      "no-object-constructor": "error",
      "no-octal": "error",
      "no-octal-escape": "error",
      "no-param-reassign": [
        "error",
        {
          ignorePropertyModificationsFor: [],
          ignorePropertyModificationsForRegex: [],
          props: true,
        },
      ],
      "no-plusplus": ["error", { allowForLoopAfterthoughts: false }],
      "no-promise-executor-return": ["error", { allowVoid: false }],
      "no-proto": "error",
      "no-prototype-builtins": "error",
      "no-redeclare": ["error", { builtinGlobals: true }],
      "no-regex-spaces": "error",
      "no-restricted-exports": [
        "error",
        {
          restrictDefaultExports: {
            defaultFrom: true,
            direct: false,
            named: true,
            namedFrom: true,
            namespaceFrom: true,
          },
          restrictedNamedExports: [],
          restrictedNamedExportsPattern: "",
        },
      ],
      "no-restricted-globals": [
        "error",
        {
          message: "Jangan pake variabel ini",
          name: "",
        },
      ],
      "no-restricted-imports": [
        "error",
        {
          paths: [
            {
              allowImportNames: ["allowed"],
              message: "Jangan pake import ini",
              name: "import-path",
            },
            {
              importNames: ["disalowed"],
              message: "Jangan pake import ini",
              name: "import-path",
            },
          ],
        },
      ],
      "no-restricted-properties": [
        "error",
        {
          message: "Jangan pake static require",
          object: "require",
        },
        {
          message: "Jangan pake disallowedObject.disallowedProperty",
          object: "disallowedObject",
          property: "disallowedProperty",
        },
      ],
      "no-restricted-syntax": [
        "error",
        {
          message: "Jangan menggunakan for",
          selector: "ForStatement",
        },
        {
          message: "Jangan menggunakan with",
          selector: "WithStatement",
        },
        {
          message: "Jangan menggunakan operator in",
          selector: "BinaryExpression[operator='in']",
        },
      ],
      "no-return-assign": ["error", "always"],
      "no-script-url": "error",
      "no-self-assign": ["error", { props: true }],
      "no-self-compare": "error",
      "no-sequences": ["error", { allowInParentheses: false }],
      "no-setter-return": "error",
      "no-shadow": [
        "error",
        {
          allow: [],
          builtinGlobals: true,
          hoist: "all",
          ignoreOnInitialization: false,
        },
      ],
      "no-shadow-restricted-names": "error",
      "no-sparse-arrays": "error",
      "no-template-curly-in-string": "error",
      "no-ternary": "error",
      "no-this-before-super": "error",
      "no-throw-literal": "error",
      "no-undef": ["error", { typeof: true }],
      "no-undef-init": "error",
      "no-undefined": "error",
      "no-underscore-dangle": [
        "error",
        {
          allow: [],
          allowAfterSuper: false,
          allowAfterThis: false,
          allowAfterThisConstructor: false,
          allowFunctionParams: false,
          allowInArrayDestructuring: false,
          allowInObjectDestructuring: false,
          enforceInClassFields: true,
          enforceInMethodNames: true,
        },
      ],
      "no-unexpected-multiline": "error",
      "no-unmodified-loop-condition": "error",
      "no-unneeded-ternary": ["error", { defaultAssignment: false }],
      "no-unreachable": "error",
      "no-unreachable-loop": ["error", { ignore: [] }],
      "no-unsafe-finally": "error",
      "no-unsafe-negation": ["error", { enforceForOrderingRelations: true }],
      "no-unsafe-optional-chaining": [
        "error",
        { disallowArithmeticOperators: true },
      ],
      "no-unused-expressions": [
        "error",
        {
          allowShortCircuit: false,
          allowTaggedTemplates: false,
          allowTernary: false,
          enforceForJSX: true,
        },
      ],
      "no-unused-labels": "error",
      "no-unused-private-class-members": "error",
      "no-unused-vars": [
        "error",
        {
          args: "all",
          argsIgnorePattern: "",
          caughtErrors: "all",
          caughtErrorsIgnorePattern: "",
          destructuredArrayIgnorePattern: "",
          ignoreClassWithStaticInitBlock: false,
          ignoreRestSiblings: false,
          reportUsedIgnorePattern: false,
          vars: "all",
          varsIgnorePattern: "",
        },
      ],
      "no-use-before-define": [
        "error",
        {
          allowNamedExports: false,
          classes: true,
          functions: true,
          variables: true,
        },
      ],
      "no-useless-assignment": "error",
      "no-useless-backreference": "error",
      "no-useless-call": "error",
      "no-useless-catch": "error",
      "no-useless-computed-key": ["error", { enforceForClassMembers: true }],
      "no-useless-concat": "error",
      "no-useless-constructor": "error",
      "no-useless-escape": "error",
      "no-useless-rename": [
        "error",
        {
          ignoreDestructuring: false,
          ignoreExport: false,
          ignoreImport: false,
        },
      ],
      "no-useless-return": "error",
      "no-var": "error",
      "no-void": ["error", { allowAsStatement: false }],
      "no-warning-comments": [
        "error",
        {
          decoration: ["/", "*", "!"],
          location: "anywhere",
          terms: ["todo", "fixme"],
        },
      ],
      "no-with": "error",
      "object-shorthand": [
        "error",
        "always",
        {
          avoidExplicitReturnArrows: true,
          avoidQuotes: false,
          ignoreConstructors: false,
          methodsIgnorePattern: "",
        },
      ],
      "one-var": ["error", "never"],
      "operator-assignment": ["error", "always"],
      "prefer-arrow-callback": [
        "error",
        { allowNamedFunctions: true, allowUnboundThis: false },
      ],
      "prefer-const": [
        "error",
        {
          destructuring: "any",
          ignoreReadBeforeAssign: false,
        },
      ],
      "prefer-destructuring": [
        "error",
        {
          array: true,
          object: true,
        },
      ],
      "prefer-exponentiation-operator": "error",
      "prefer-named-capture-group": "error",
      "prefer-numeric-literals": "error",
      "prefer-object-has-own": "error",
      "prefer-object-spread": "error",
      "prefer-promise-reject-errors": ["error", { allowEmptyReject: false }],
      "prefer-regex-literals": ["error", { disallowRedundantWrapping: true }],
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "prefer-template": "error",
      radix: ["error", "always"],
      "react/boolean-prop-naming": [
        "error",
        {
          message:
            "Silahkan ubah ({{ propName }}) sesuai dengan: ({{ pattern }})",
          propTypeNames: ["bool"],
          rule: "^(is|has)[A-Z]([A-Za-z0-9]?)+",
          validateNested: true,
        },
      ],
      "react/button-has-type": [
        "error",
        {
          button: false,
          reset: false,
          submit: false,
        },
      ],
      "react/checked-requires-onchange-or-readonly": [
        "error",
        {
          ignoreExclusiveCheckedAttribute: false,
          ignoreMissingProperties: false,
        },
      ],
      "react/default-props-match-prop-types": [
        "error",
        { allowRequiredDefaults: false },
      ],
      "react/destructuring-assignment": ["error", "always"],
      "react/display-name": [
        "error",
        {
          checkContextObjects: true,
          ignoreTranspilerName: false,
        },
      ],
      "react/forbid-component-props": [
        "error",
        {
          forbid: [
            {
              message: "dilarang pake prop style",
              propName: "style",
            },
            {
              allowedFor: ["NextImage"],
              message: "dilarang pake prop className",
              propName: "className",
            },
          ],
        },
      ],
      "react/forbid-dom-props": [
        "error",
        {
          forbid: [
            {
              message: "dilarang pake prop style",
              propName: "style",
            },
          ],
        },
      ],
      "react/forbid-elements": [
        "error",
        { forbid: [{ element: "img", message: "use <NextImage> instead" }] },
      ],
      "react/forbid-foreign-prop-types": ["error", { allowInPropTypes: false }],
      "react/forbid-prop-types": ["error"],
      "react/forward-ref-uses-ref": ["error"],
      "react/function-component-definition": ["error"],
      "react/hook-use-state": ["error"],
      "react/iframe-missing-sandbox": ["error"],
      "react/jsx-boolean-value": ["error"],
      "react/jsx-child-element-spacing": ["error"],
      "react/jsx-closing-bracket-location": ["error"],
      "react/jsx-closing-tag-location": ["error"],
      "react/jsx-curly-brace-presence": [
        "error",
        {
          children: "always",
          propElementValues: "always",
          props: "always",
        },
      ],
      "react/jsx-curly-newline": ["error"],
      "react/jsx-curly-spacing": ["error"],
      "react/jsx-equals-spacing": ["error"],
      "react/jsx-filename-extension": [
        "error",
        {
          allow: "as-needed",
          extensions: [".tsx"],
          ignoreFilesWithoutCode: false,
        },
      ],
      "react/jsx-first-prop-new-line": ["error"],
      "react/jsx-fragments": ["error"],
      "react/jsx-handler-names": ["error"],
      "react/jsx-indent": [
        "error",
        indentLength,
        { checkAttributes: true, indentLogicalExpressions: true },
      ],
      "react/jsx-indent-props": [
        "error",
        {
          ignoreTernaryOperator: false,
          indentMode: indentLength,
        },
      ],
      "react/jsx-key": ["error"],
      "react/jsx-max-depth": ["error"],
      "react/jsx-max-props-per-line": ["error"],
      "react/jsx-newline": [
        "error",
        {
          allowMultilines: false,
          prevent: true,
        },
      ],
      "react/jsx-no-bind": ["error"],
      "react/jsx-no-comment-textnodes": ["error"],
      "react/jsx-no-constructed-context-values": ["error"],
      "react/jsx-no-duplicate-props": ["error"],
      "react/jsx-no-leaked-render": ["error"],
      "react/jsx-no-literals": ["error"],
      "react/jsx-no-script-url": ["error"],
      "react/jsx-no-target-blank": ["error"],
      "react/jsx-no-undef": ["error"],
      "react/jsx-no-useless-fragment": ["error"],
      "react/jsx-one-expression-per-line": ["error"],
      "react/jsx-pascal-case": ["error"],
      "react/jsx-props-no-multi-spaces": ["error"],
      "react/jsx-props-no-spread-multi": ["error"],
      "react/jsx-props-no-spreading": ["error"],
      "react/jsx-sort-props": ["error"],
      "react/jsx-tag-spacing": ["error"],
      "react/jsx-uses-react": ["error"],
      "react/jsx-uses-vars": ["error"],
      "react/jsx-wrap-multilines": ["error"],
      "react/no-access-state-in-setstate": ["error"],
      "react/no-adjacent-inline-elements": ["error"],
      "react/no-array-index-key": ["error"],
      "react/no-arrow-function-lifecycle": ["error"],
      "react/no-children-prop": ["error"],
      "react/no-danger": ["error"],
      "react/no-danger-with-children": ["error"],
      "react/no-deprecated": ["error"],
      "react/no-did-mount-set-state": ["error"],
      "react/no-did-update-set-state": ["error"],
      "react/no-direct-mutation-state": ["error"],
      "react/no-find-dom-node": ["error"],
      "react/no-invalid-html-attribute": ["error"],
      "react/no-is-mounted": ["error"],
      "react/no-multi-comp": ["error"],
      "react/no-namespace": ["error"],
      "react/no-object-type-as-default-prop": ["error"],
      "react/no-redundant-should-component-update": ["error"],
      "react/no-render-return-value": ["error"],
      "react/no-set-state": ["error"],
      "react/no-string-refs": ["error"],
      "react/no-this-in-sfc": ["error"],
      "react/no-typos": ["error"],
      "react/no-unescaped-entities": ["error"],
      "react/no-unknown-property": ["error"],
      "react/no-unsafe": ["error"],
      "react/no-unstable-nested-components": ["error"],
      "react/no-unused-class-component-methods": ["error"],
      "react/no-unused-prop-types": ["error"],
      "react/no-unused-state": ["error"],
      "react/no-will-update-set-state": ["error"],
      "react/prefer-es6-class": ["error"],
      "react/prefer-exact-props": ["error"],
      "react/prefer-read-only-props": ["error"],
      "react/prefer-stateless-function": ["error"],
      "react/prop-types": ["error"],
      "react/react-in-jsx-scope": ["error"],
      "react/require-default-props": ["error"],
      "react/require-optimization": ["error"],
      "react/require-render-return": ["error"],
      "react/self-closing-comp": ["error"],
      "react/sort-comp": ["error"],
      "react/sort-default-props": ["error"],
      "react/sort-prop-types": ["error"],
      "react/state-in-constructor": ["error"],
      "react/static-property-placement": ["error"],
      "react/style-prop-object": ["error"],
      "react/void-dom-elements-no-children": ["error"],
      "react-hooks/exhaustive-deps": [
        "error",
        {
          additionalHooks: "^$",
        },
      ],
      "react-hooks/rules-of-hooks": "error",
      "require-atomic-updates": ["error", { allowProperties: false }],
      "require-await": "error",
      "require-unicode-regexp": ["error", { requireFlag: "u" }],
      "require-yield": "error",
      "sort-imports": [
        "error",
        {
          allowSeparatedGroups: false,
          ignoreCase: false,
          ignoreDeclarationSort: true,
          // Conflict with import/order
          // "ignoreDeclarationSort": false,
          ignoreMemberSort: false,
          memberSyntaxSortOrder: ["single", "all", "multiple", "none"],
        },
      ],
      "sort-keys": [
        "error",
        "asc",
        {
          allowLineSeparatedGroups: false,
          caseSensitive: true,
          minKeys: minSortKeys,
          natural: true,
        },
      ],
      "sort-vars": ["error", { ignoreCase: false }],
      strict: ["error", "never"],
      "symbol-description": "error",
      "unicode-bom": ["error", "never"],
      "use-isnan": [
        "error",
        {
          enforceForIndexOf: true,
          enforceForSwitchCase: true,
        },
      ],
      "valid-typeof": ["error", { requireStringLiterals: true }],
      "vars-on-top": "error",
      yoda: ["error", "always", { exceptRange: true }],
    },
    settings: {
      react: {
        version: "detect",
      },
    },
  },
  {
    files: ["src/**/*.{ts,tsx}"],
    languageOptions: { globals: globals.browser },
  },
  {
    files: ["*.config.ts", "*.config.mjs"],
    languageOptions: { globals: globals.node },
    rules: {
      "@typescript-eslint/naming-convention": "off",
      "id-length": [
        "error",
        {
          ...idLengthCommon,
          exceptions: [],
          properties: "never",
        },
      ],
      "id-match": ["error", "^[A-Za-z23]+$|^[A-Z]+(_[A-Z]+)*$", idMatchOptions],
      "import/no-nodejs-modules": "off",
      "max-lines": "off",
    },
  },
]);

export default eslintConfig;

